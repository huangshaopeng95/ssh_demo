package cn.com.demo.dao.impl;

import java.util.HashMap;
import java.util.List;

import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.ResultTransformer;
import org.hibernate.transform.Transformers;
import org.springframework.orm.hibernate5.HibernateTemplate;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;

import cn.com.demo.dao.CustomerDao;
import cn.com.demo.domain.Customer;

public class CustomerDaoImpl extends HibernateDaoSupport implements CustomerDao {

	@Override
	public void addCustomer(Customer customer) {
		// 得到模板对象
		HibernateTemplate hibernateTemplate = this.getHibernateTemplate();
		hibernateTemplate.save(customer);

	}

	@Override
	public List<Customer> findAll() {
		HibernateTemplate hibernateTemplate = this.getHibernateTemplate();
		List<Customer> list = (List<Customer>) hibernateTemplate.find("from Customer");

		return list;
	}

	@Override
	public Customer findCustomerById(Integer id) {
		return this.getHibernateTemplate().get(Customer.class, id);
	}

	@Override
	public void deleteCustomer(Customer c) {
		this.getHibernateTemplate().delete(c);
	}

	@Override
	public void updateCustomer(Customer customer) {
		this.getHibernateTemplate().update(customer);
	}

	// 查询总记录数
	@Override
	public Integer findCount() {
		List<Object> list = (List<Object>) this.getHibernateTemplate().find("select count(*) from Customer");
		Integer count = 0;
		if (list != null && list.size() != 0) {
			Object obj = list.get(0);
			Long lobj = (Long) obj;
			count = lobj.intValue();
		}
		return count;
	}

	// 查询每页的记录
	@Override
	public List<Customer> findPage(Integer begin, Integer pageSize) {
		// 方式二：使用离线对象和hibernateTemplate方法
		DetachedCriteria deCriteria = DetachedCriteria.forClass(Customer.class);
		
		List<Customer> list = (List<Customer>) this.getHibernateTemplate().findByCriteria(deCriteria, begin, pageSize);

		return list;
	}

	//按条件模糊查询
	@Override
	public List<Customer> findAllByCustomer(Customer customer) {
		//方式一：
		//String name = "%"+customer.getCustName()+"%";
		//List<Customer> list = (List<Customer>) this.getHibernateTemplate().find("from Customer where custName like ?",name);
		
		//方式二：使用离线对象
		DetachedCriteria deCriteria = DetachedCriteria.forClass(Customer.class);
		if(customer.getCustName() != null && !customer.getCustName().equals("")) {
			String name = "%"+customer.getCustName()+"%";
			deCriteria.add(Restrictions.like("custName",name));
		}
		if(customer.getCustSource() != null && !customer.getCustSource().equals("")) {
			String source = "%"+customer.getCustSource()+"%";
			deCriteria.add(Restrictions.like("custSource",source));
		}
		if(customer.getCustPhone() != null	&& !customer.getCustPhone().equals("")) {
			String phone = "%"+customer.getCustPhone()+"%";
			deCriteria.add(Restrictions.like("custPhone",phone));
		}
		
		
		List<Customer> list = (List<Customer>) this.getHibernateTemplate().findByCriteria(deCriteria);
		
		return list;
	}

	//按客户来源统计查询
	@Override
	public List findCountSource() {
		//
		Session session = this.getSessionFactory().getCurrentSession();
		SQLQuery sQLQuery = session.createSQLQuery("SELECT COUNT(*) AS num,custSource FROM ssh_customer GROUP BY custSource");
		
		sQLQuery.setResultTransformer(Transformers.aliasToBean(HashMap.class));
		
		List list = sQLQuery.list();
		
		return list;
	}
}
